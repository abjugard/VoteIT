<!--
	VoteIT (https://github.com/cthit/VoteIT)
	Created by Robin Sveningson, styrIT14/15
-->

<html>
	<head>
		<title>Vote</title>

		<!-- Stylesheets -->
		<link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css'>
		<link rel='stylesheet' href='../../public/css/general.css'>

		<!-- Scripts -->
		<script src='http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js'></script>
	    <script src="http://malsup.github.com/jquery.form.js"></script> 
		<script src='https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js'></script>
		<script src='/socket.io/socket.io.js'></script>

		<!-- If there exists an accessCode (doesn't have to be valid though). -->
		<% if (accessCode) { %>
		     <script>
		     	/* The access code. Is sent as a parameter in all post requests. */
		        var code = '<%= accessCode %>';

		     	/* Variables used to store the data recieved from the socket conenction.
		     		The data has all the information regarding the current question. */
		        var question = ''; // The question string
		        var answers = []; // All the possible answers
		        var numberOfRequired = 0; // How many answers the server requires
		        var vacantIndex = -1; // -1 if vacants are disabled, else the index of the 'vacant' string in the answers list
		        var blankIndex = -1; // -1 if blanks are disabled, else the index of the 'blank' string in the answers list

		        /* All the answers the user has registered via key presses. */
		        var givenAnswers = [];

		        /* Checks if there is currently a visible flash message. */
		        var flashBusy = false;

		        /* Initializes a socket connection to the server. */
				var socket = io.connect('http://127.0.0.1:8080/', { query: 'code=' + code });

				/* To make sure that the flash messages are shown for 2000 ms. */
				var lastFlashInit = 0;

				/* Translates keyCodes to an index.
								1  2  3  4  5  6  7  8  9  0  q    w   e   r   t   y   u   i   o   p  a   s   d   f   g   h   j   k   l   z   x  c   v  b   n   m*/
				var keyCodes = [49,50,51,52,53,54,55,56,57,48,113,119,101,114,116,121,117,105,111,112,97,115,100,102,103,104,106,107,108,122,120,99,118,98,110,109];

		     	/*	Displays a new question to the user.
		     		Assumes: question, answers, numberOfRequired, vacantIndex and blankIndex contains data regarding the current question.
		     	*/
				function initQuestion() {
					/* Removes all paragraphs used to display answers. We don't want to use the clearQuestion() before initQuestion()
					 	because we don't want the user to see the text 'Väntar på fråga...' flashing by before the next question is displayed. */
					$('.answer').remove();

					$('#question').html(question);

					/* When answers are sent via JSON (in the scenario where there exists a question when a user logins, and the question data
		     			is sent as redirect parameters) then the list of answers will be a string, and we must therefore split it by commas.
						The server must make sure no commas are used in any of the answers. */
					if(answers.indexOf(',') > 0)
						answers = answers.split(',');

				    for(var i = answers.length - 1; i >= 0; i--)
				    	$('<h5 class=\'answer centeredText\'>' + answers[i] + ' (' + (String.fromCharCode(keyCodes[i])) + ')</h5>').insertAfter('#question');
				    givenAnswers = [];
				    $('button').prop('disabled', false);
				    updateButtons();
				    centerVoteWrapper();
				}

				function centerVoteWrapper() {
					if(window && $('#voteWrapper')) {
						var windowHeight = $(window).outerHeight();
						var wrapperHeight = $('#voteWrapper').outerHeight();
						if(wrapperHeight < windowHeight) {
							$('#voteWrapper').css('margin-top', windowHeight/2 - wrapperHeight/2);
						} else 
					    	$('#voteWrapper').css('margin-top', 0);
					}
				}

				/*	Clears a currently visible question. */
				function clearQuestion() {
					$('#question').html('Väntar på fråga...');
					$('.answer').remove();
					question = null;
					answers = null;
					numberOfRequired = null;
					vacantIndex = -1;
					blankIndex = -1;
					givenAnswers = [];
					$('button').prop('disabled', true);
					updateButtons();
					centerVoteWrapper();
				}

				/* Displays a flash message to the user. */
				function flashMessage(msg) {
					//Change message
					$('#flash').html(msg);

					lastFlashInit = new Date().getTime();
					flashBusy = true;
					$('#flash').show();
					setTimeout(clearFlashMessage, 2000);
				}

				/* Removes a currently visible flash message. */
				function clearFlashMessage() {
					if(new Date().getTime() - 2000 >= lastFlashInit) {
						$('#flash').hide();
						flashBusy = false;
					}
				}

				/* Checks if there exists a question. */
				function hasQuestion() {
					return question != null && question != '' && answers != null && numberOfRequired != null && blankIndex != null && vacantIndex != null;
				}

				/* Used to display all the answers the user has given in a flash message. This method is called by a button in the GUI. */
				function displayAnswers() {
					var a = '';
					for(var i = 0; i < givenAnswers.length; i++) {
						if(i != givenAnswers.length - 1)
							a += answers[givenAnswers[i]] + ', ';
						else
							a += answers[givenAnswers[i]];
					}
					if(a == '')
						flashMessage('Inga svar registrerade.');
					else
						flashMessage('Svar: ' + a);
					updateButtons();
				}

				/* Used to clear all the given answers. This method is called by a button in the GUI. */
				function clearAnswers() {
					givenAnswers = [];
					flashMessage('Svaren är nollställda.')
					updateButtons();
				}

				/* The method used to post all the given answers to the server. This method is called by a button in the GUI. */
				function postAnswer() {
					$('#accessCodeInput').val(code);
					$('#answersInput').val(givenAnswers);
					return givenAnswers.length == numberOfRequired;
				}

				/* Enables/disables the send button. Updates the given answers counter on the displayAnswers button. */
				function updateButtons() {
					if(numberOfRequired == null || numberOfRequired == -1 || !numberOfRequired)
						$('#displayAnswersButton').html('Registrerade svar');
					else
						$('#displayAnswersButton').html('Registrerade svar (' + givenAnswers.length + '/' + numberOfRequired + ')');

					if(givenAnswers.length == numberOfRequired)
						$('#send').prop('disabled', false);
					else
						$('#send').prop('disabled', true);
				}

				/* Get index of keyCode. */
				function getIndex(keyCode) {
					for(var i = 0; i < keyCodes.length; i++)
						if(keyCodes[i] == keyCode)
							return i;
					return -1;
				}

				/* Takes care of all the keypresses for given answers. */
				window.onkeypress = function(e) {
					if(hasQuestion()) {
						if(givenAnswers.length < numberOfRequired) {
							var index = getIndex(e.keyCode);
							if(index >= 0 && index < answers.length) {
								//Vacants and blanks can be registered several times.
								if(index != vacantIndex && index != blankIndex) {
									for(var i = 0; i < givenAnswers.length; i++) {
										if(givenAnswers[i] == index) {
											flashMessage('Svaret har registrerats förut!');
											updateButtons();
											return;
										}
									}
								}

								givenAnswers[givenAnswers.length] = index;
								flashMessage('Svar registrerat!');
							}
						} else
							flashMessage('Alla svar är redan angivna!')
					}
					updateButtons();
				};

				/* Initialize a question once the DOM objects are loaded. */
				window.onload = function(e) {
					$('#voteForm').ajaxForm({
				        url: '/', // or whatever
				        dataType: 'json',
				        success: function (response) {
				            var result = response.result;
							if(result == 'success') {
								clearQuestion();
								flashMessage('Svaret har mottagits av servern!');
							} else if(result == 'anweredError') {
								//The access code has already given an answer to this question.
								clearQuestion();
								flashMessage('Du har redan svarat på frågan.')
							} else if(result == 'corruptError') {
								//Should never happen unless user changes the frontend code.
								flashMessage('Korrupt svarsdata.');
							} else if(result == 'codeError') {
								$(document.body).html('Access denied.');
							}
				        }
				    });

					if(hasQuestion())
						initQuestion();
					else {
						updateButtons();
						$('button').prop('disabled', true);
					}
				}

				window.onresize = centerVoteWrapper;

				/* Handle incoming socket messages. */
				socket.on('new question', function(msg){
					question = msg.question;
					answers = msg.answers;
					numberOfRequired = msg.numberOfRequired;
					vacantIndex = msg.vacantIndex;
					blankIndex = msg.blankIndex;

					$('#voteWrapper').css('display', 'table');

					if(hasQuestion())
						//If the message contained a new question
				    	initQuestion();
				    else
				    	//If the message contained an empty question
				    	clearQuestion();
				});
		     </script>
		<% } %>
	</head>
	<body>
		<div id='voteWrapper' class='centeredWrapper centeredText'>
			<h2 id='question'>
				Väntar på fråga...
			</h2>
			<form id='voteForm' action='/' method='post' onsubmit='return postAnswer()'>
				<button id='displayAnswersButton' type='button' class='btn btn-default btn-xs' onclick='displayAnswers()'>Registrerade svar</button>
				<button type='button' class='btn btn-danger btn-xs' onClick='clearAnswers()'>Nollställ svar</button>
				<button id='send' type='submit' onsubmit='return postAnswer()' class='btn btn-success btn-xs'>Svara</button>
				<input type='hidden' id='accessCodeInput' name='accessCode'>
				<input type='hidden' id='answersInput' name='answers'>
			</form>
			<p id='flash'></p>
		</div>
	</body>
</html>